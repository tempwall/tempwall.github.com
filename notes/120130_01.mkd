# 关于语言的一点儿杂记
## 写在正文之前
不是很习惯markdown，不过用来快速生成html页面确实很方便。也许是自己比较懒，所以实在是没有耐心去配置vim，只是装了个语法高亮插件，实际编辑文档依旧用的retext。好吧，很典型的windows用户思路。不过我并没有非要变成所谓linuxer的想法。
## 正文
计算机语言从诞生以来就有了流派之争。相当一段时间内，以C为代表的过程式将Lisp领军的函数式打得毫无还手之力。之后，相继出现的逻辑式和对象式又各自占有一方天地，面向对象（Object Oriented）更是成为了新的市场风向。

不过么，今天并没有评论某个流派的打算……事实上一来不是很认同这种有些生硬的分门别类，二来自己也没有足够的资料来写这种可能会变得很罗嗦的玩意。所以，下面是一些个人对不同编程风格的理解，无涉优劣。

先说说C和Racket（Lisp->Scheme->Racket)。理论角度看，这两种语言分别代表了两种很是极端的风格。一端，是追求表达计算机行为方式的高级语言，C；另一端，则是追求实现图灵模型的高级语言，Racket。如果用人类进行类比，那么C语言试图描述的是肉体（表达一切行为），Racket想要摹仿的是精神（抽象一切行为）。有意思的是，这种极端化的做法使得二者对于计算机语言本身，都具备了某种“造物主”的意味。C语言被极其频繁地用于构造其他语言，以至于有人称之为“编写其他语言的高级语言”。而racket本身就具备了构造语言的直接能力，干脆在语言内部提供了lang标记以确定解释器。

这里稍微解释一下。上文所述的概念理解起来可能有些麻烦，主要在于日常语言中并没有对“语言”本身做如此细致的解释。事实上，如果用英语或是中文，与物理和数学进行比对，可能会比较容易理解这种概念。真正意义上对于世界比较完善的描述来自于人类长期以来发展的数理逻辑，日常语言就自身设计来说并没有这方面的考量——也不可能发展成那样。不过，反过来说，如果真要强行用日常语言进行世界描述，大体上也是可以做到的。就像你完全可以尝试着用Java来写个Lisp或是C的解释器，就算不是足够完备，九成以上的功能也必定能够实现。但是，本文想要写的是语言本身的特性，因而这方面的问题以下就敬请忽略了～

好吧，实际上我想说极端化的玩意虽然很强悍但是真是不怎么好玩的。C语言要求程序员用计算机思维看待问题，Racket要求程序员具备函数抽象能力。实在是太过于折磨人了。所以，下面还是来看看传说中的，面向对象的程序设计吧！

插入语：暂时忽略逻辑式语言吧……这种家伙实在是太小众了点儿。虽然完备性堪比函数式，不过实现上的效率就低很多了。只有一些特定的应用场合，例如专家系统会比较喜欢它。

事实上，之所以前面说到不赞成使用分类法，就是因为语言本身其实是可以不受程序设计方式限定的。而像Racket这样的语言，在实际设计中也并没有非要用函数式设计的理由（当然，对C而言无可选择），无论构筑对象还是模拟过程都不难做到。那么，什么是面向对象呢？

引用下前面的例子，你实际上完全可以将面向对象类比于我们使用的日常语言。也许不那么完备，但是容易学习和使用，可以很方便地描述事物。不妨从语义的角度来试着理解一下。譬如，汉语当中，你肯定很习惯说“苹果可以吃”，但是绝对不会喜欢“建立吃映射，允许参数苹果”这种诡异的描述……

那么，如果上面的说法能让你感受到一点儿东西的话，接下来的内容其实是很容易理解的。

所谓面向对象，实际上是一种典型的抽象方式。它将世间事物抽象为对象（object），赋予其类别（class）、状态（state）、行为（behaviour）和标识（identity），通过对象之间的交互和类别体系的构筑，描述事物形态。举例来说，如果对乔布斯的苹果应用这种抽象方式，我们会得到一个对象：

* 属类：苹果（这里你可能会想为何不是水果，答案其实很容易想到）
* 标识：乔布斯的苹果
* 状态：咬了一口
* 行为：被咬

当然，这不是个完善的描述，但是我想这至少会让你觉得很自然。对吧？我们在抽象体系，也就是我们的计算机语言体系中构筑了一个苹果类的对象，现在已经可以对它进行操作了。怎么样，有没有点儿面对一个真苹果的感觉？

我们最习惯的日常语言，大体上就可以认为是一种面向对象的语言。特别是语言体系远较英语完善的汉语，这一特点更为鲜明。现实生活当中，我们很熟悉的思维方式就是建立对象模型，赋予其名称等相关属性描述，用类型界定其特点，再给出其特有性质。想想看，汉语的一大特性就是几乎所有的主要结构（名词、动词、形容词等）都可以转义为名词（对象），对象的类别和相互作用构成了基本语言体系。类似的，英语实际上也有这样的特征，因此一个英语动词往往有名词和形容词形态的变化。不过，由于完善度相对低，英语也存在大量的例外情形，这里就不深入了。

进一步的，不论你认同与否，语言决定思维这种说法还是有其价值的。换言之，我们在实际的行为当中，事实上频繁地运用对象描述这种方法，以帮助界定问题和展开讨论。

到这里，本文已经基本结束……不过我得说接下来的不是废话。

最后回顾一下函数式和面向对象。对于不熟悉的朋友，可能觉得二者相当相似。但是实际上呢？我们依然用一个例子来看好了。假定一个花盆从楼上掉了下来（希望大家不要遇到这种事情），面向对象的描述方法是：类别坠落体，标识花盆，状态坠落中（高度xxx），行为坠落（加速度xxx）。函数式呢？给出坠落函数xxx，赋予参数（高度xxx，加速度xxx），完毕。有点意思，不是么？这里假设的还是全知状况。如果是现实的待解问题，那么将带来更大的差异……以及思维方式的差异。

全文完。